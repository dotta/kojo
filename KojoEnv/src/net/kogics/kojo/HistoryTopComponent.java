/*
 * Copyright (C) 2009 Lalit Pant <pant.lalit@gmail.com>
 *
 * The contents of this file are subject to the GNU General Public License
 * Version 3 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.gnu.org/copyleft/gpl.html
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 */
package net.kogics.kojo;

import java.awt.AWTException;
import java.awt.Robot;
import java.awt.event.InputEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//net.kogics.kojo//History//EN",
autostore = false)
public final class HistoryTopComponent extends TopComponent {

    private static HistoryTopComponent instance;
    /** path to the icon used by the component and its open action */
    static final String ICON_PATH = "images/history.png";
    private static final String PREFERRED_ID = "HistoryTopComponent";

    public HistoryTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(HistoryTopComponent.class, "CTL_HistoryTopComponent"));
        setToolTipText(NbBundle.getMessage(HistoryTopComponent.class, "HINT_HistoryTopComponent"));
        setIcon(ImageUtilities.loadImage(ICON_PATH, true));
        putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_KEEP_PREFERRED_SIZE_WHEN_SLIDED_IN, Boolean.TRUE);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();

        jList1.setModel(new HistoryListModel(jList1));
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.setCellRenderer(new HistoryCellRenderer());
        jList1.setComponentPopupMenu(new HistoryPopupMenu(jList1));
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jList1MousePressed(evt);
            }
        });
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 422, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        if (!evt.getValueIsAdjusting() && jList1.getSelectedIndex() != -1) {
            try {
                CodeExecutionSupport ces = (CodeExecutionSupport) CodeExecutionSupport.instance();
                ces.loadCodeFromHistory(jList1.getSelectedIndex());
                SwingUtilities.invokeLater(new Runnable() {

                    public void run() {
                        CodeEditorTopComponent.findInstance().requestActive();
                    }
                });
            } catch (Exception e) {
                Logger.getLogger(HistoryTopComponent.class.getName()).log(Level.WARNING, "Exception while loading code via History - {0}", e.getMessage());
                // Stop the (instance not inited) exception from going on and messing up the event thread
                // this is an attempted fix based on a stack trace from KLC
            }
        }
}//GEN-LAST:event_jList1ValueChanged

    private void jList1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MousePressed
        if (SwingUtilities.isRightMouseButton(evt)) {
            jList1.setSelectedIndex(jList1.locationToIndex(evt.getPoint()));
            // if one needs to simulate a 'true' left mouse click so that, for example,
            // multiple item selection works even with right mouse click, the correct
            // approach is to use the Robot (as shown below). I dunno if this
            // will work on Linux/OSX though, so I'm just setting the selected
            // index (above). This works fine for me
            // because the History List just supports single selection
//            try {
//                Robot robot = new java.awt.Robot();
//                robot.mousePress(InputEvent.BUTTON1_MASK);
//                robot.mouseRelease(InputEvent.BUTTON1_MASK);
//            } catch (AWTException ae) {
//            }
        }
    }//GEN-LAST:event_jList1MousePressed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized HistoryTopComponent getDefault() {
        if (instance == null) {
            instance = new HistoryTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the HistoryTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized HistoryTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(HistoryTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof HistoryTopComponent) {
            return (HistoryTopComponent) win;
        }
        Logger.getLogger(HistoryTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    public void selectLast() {
        int n = jList1.getModel().getSize() - 1;
        jList1.setSelectedIndex(n);
        jList1.ensureIndexIsVisible(n);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    Object readProperties(java.util.Properties p) {
        if (instance == null) {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }
}
